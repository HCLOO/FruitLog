package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.think.fruitlog.daotable.LogTag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOG_TAG".
*/
public class LogTagDao extends AbstractDao<LogTag, Long> {

    public static final String TABLENAME = "LOG_TAG";

    /**
     * Properties of entity LogTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LogTitle = new Property(1, String.class, "logTitle", false, "LOG_TITLE");
        public final static Property LogTime = new Property(2, String.class, "logTime", false, "LOG_TIME");
        public final static Property LogContent = new Property(3, String.class, "logContent", false, "LOG_CONTENT");
    }


    public LogTagDao(DaoConfig config) {
        super(config);
    }
    
    public LogTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOG_TAG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOG_TITLE\" TEXT," + // 1: logTitle
                "\"LOG_TIME\" TEXT," + // 2: logTime
                "\"LOG_CONTENT\" TEXT);"); // 3: logContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOG_TAG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LogTag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String logTitle = entity.getLogTitle();
        if (logTitle != null) {
            stmt.bindString(2, logTitle);
        }
 
        String logTime = entity.getLogTime();
        if (logTime != null) {
            stmt.bindString(3, logTime);
        }
 
        String logContent = entity.getLogContent();
        if (logContent != null) {
            stmt.bindString(4, logContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LogTag entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String logTitle = entity.getLogTitle();
        if (logTitle != null) {
            stmt.bindString(2, logTitle);
        }
 
        String logTime = entity.getLogTime();
        if (logTime != null) {
            stmt.bindString(3, logTime);
        }
 
        String logContent = entity.getLogContent();
        if (logContent != null) {
            stmt.bindString(4, logContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LogTag readEntity(Cursor cursor, int offset) {
        LogTag entity = new LogTag( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // logTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // logTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // logContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LogTag entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLogTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLogTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LogTag entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LogTag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LogTag entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
